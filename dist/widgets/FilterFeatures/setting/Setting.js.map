{"version":3,"sources":["../../../../widgets/FilterFeatures/setting/Setting.js"],"names":["declare","BaseWidgetSetting","_WidgetsInTemplateMixin","QueryTask","Query","lang","LayerInfos","array","dom","on","esriRequest","html","CheckBox","baseClass","startup","inherited","arguments","setConfig","config","postCreate","_setListLayers","NodeUrlDepa","NodeFieldLabelDepa","NodeFieldValueDepa","NodeUrlProv","NodeFieldLabelProv","NodeFieldValueProv","NodeUrlDist","NodeFieldLabelDist","NodeFieldValueDist","setValue","departamento","id","label","value","provincia","distrito","getConfig","dojonodeService","dojonodeAlias","dojonodeValue","getInstance","map","itemInfo","then","hitch","layerInfosObj","infos","getLayerInfoArray","layerInfosObjClone","options","i","arrayLayers","getSubLayers","length","arrayoptions","_listSubLayerdOfRootLayer","push","apply","optSubLayers","_layerInfos","concat","infoSubLayers","title","layerObject","url","evt","response","fields","optionFields","forEach","field","alias","name","set","optionsSublayers","infosSublayers","recursiveSubLayers","sublayers"],"mappings":"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","file":"Setting.js","sourcesContent":["import declare from 'dojo/_base/declare';\r\nimport BaseWidgetSetting from 'jimu/BaseWidgetSetting';\r\nimport _WidgetsInTemplateMixin from 'dijit/_WidgetsInTemplateMixin';\r\nimport QueryTask from 'esri/tasks/QueryTask';\r\nimport Query from 'esri/tasks/query';\r\nimport lang from 'dojo/_base/lang';\r\nimport LayerInfos from 'jimu/LayerInfos/LayerInfos';\r\nimport array from 'dojo/_base/array';\r\nimport dom from \"dojo/dom\";\r\nimport on from \"dojo/on\";\r\nimport esriRequest from \"esri/request\";\r\nimport html from \"dojo/html\";\r\nimport CheckBox from \"dijit/form/CheckBox\";\r\n\r\nexport default declare([\r\n    BaseWidgetSetting,\r\n    _WidgetsInTemplateMixin,\r\n    QueryTask,\r\n    Query,\r\n], {\r\n\r\n    baseClass: 'filter-features-setting',\r\n\r\n\r\n    startup: function() {\r\n        this.inherited(arguments);\r\n        this.setConfig(this.config);\r\n    },\r\n\r\n    postCreate() {\r\n        this._setListLayers(this.NodeUrlDepa, this.NodeFieldLabelDepa, this.NodeFieldValueDepa);\r\n        this._setListLayers(this.NodeUrlProv, this.NodeFieldLabelProv, this.NodeFieldValueProv);\r\n        this._setListLayers(this.NodeUrlDist, this.NodeFieldLabelDist, this.NodeFieldValueDist);\r\n\r\n        // this._gridxLayers();\r\n\r\n    },\r\n\r\n    setConfig(config) {\r\n        this.config = config;\r\n        this.NodeUrlDepa.setValue(config.departamento.id);\r\n        this.NodeFieldLabelDepa.setValue(config.departamento.label);\r\n        this.NodeFieldValueDepa.setValue(config.departamento.value);\r\n\r\n        this.NodeUrlProv.setValue(config.provincia.id);\r\n        this.NodeFieldLabelProv.setValue(config.provincia.label);\r\n        this.NodeFieldValueProv.setValue(config.provincia.value);\r\n\r\n        this.NodeUrlDist.setValue(config.distrito.id);\r\n        this.NodeFieldLabelDist.setValue(config.distrito.label);\r\n        this.NodeFieldValueDist.setValue(config.distrito.value);\r\n    },\r\n\r\n    getConfig() {\r\n        return {\r\n            departamento: {\r\n                'url': this.NodeUrlDepa.value,\r\n                'label': this.NodeFieldLabelDepa.value,\r\n                'value': this.NodeFieldValueDepa.value\r\n            },\r\n            provincia: {\r\n                'url': this.NodeUrlProv.value,\r\n                'label': this.NodeFieldLabelProv.value,\r\n                'value': this.NodeFieldValueProv.value\r\n            },\r\n            distrito: {\r\n                'url': this.NodeUrlDist.value,\r\n                'label': this.NodeFieldLabelDist.value,\r\n                'value': this.NodeFieldValueDist.value\r\n            }\r\n        };\r\n    },\r\n\r\n    _setListLayers(dojonodeService, dojonodeAlias, dojonodeValue) {\r\n        LayerInfos.getInstance(this.map, this.map.itemInfo)\r\n            .then(lang.hitch(this, function(layerInfosObj) {\r\n                var infos = layerInfosObj.getLayerInfoArray();\r\n                var layerInfosObjClone = layerInfosObj;\r\n                var options = [];\r\n                for (var i in infos) {\r\n                    var arrayLayers = infos[i].getSubLayers();\r\n                    if (arrayLayers.length > 0) {\r\n                        var arrayoptions = this._listSubLayerdOfRootLayer(arrayLayers);\r\n                        options.push.apply(options, arrayoptions.optSubLayers);\r\n                        layerInfosObjClone._layerInfos = layerInfosObjClone._layerInfos.concat(arrayoptions.infoSubLayers);\r\n                    } else {\r\n                        options.push({\r\n                            label: infos[i].title,\r\n                            value: infos[i].layerObject.url,\r\n                        })\r\n                    }\r\n                };\r\n                dojonodeService.options = options;\r\n\r\n                dojonodeService.on('change', function(evt) {\r\n                    // var selectedLayer = layerInfosObjClone.getLayerInfoById(evt);\r\n\r\n                    // var url = selectedLayer.layerObject.url;\r\n                    esriRequest({url: evt + \"?f=json\"}).then(function(response) {\r\n                        var fields = response.fields;\r\n                        var optionFields = []\r\n                        fields.forEach(function(field) {\r\n                            optionFields.push({\r\n                                label: field.alias,\r\n                                value: field.name,\r\n                            })\r\n                        })\r\n                        dojonodeAlias.set('options', optionFields);\r\n                        dojonodeValue.set('options', optionFields);\r\n                    });\r\n                })\r\n            }));\r\n    },\r\n\r\n    _listSubLayerdOfRootLayer(arrayLayers) {\r\n        var optionsSublayers = [];\r\n        var infosSublayers = [];\r\n        recursiveSubLayers(arrayLayers);\r\n\r\n        function recursiveSubLayers(arrayLayers) {\r\n            for (var i in arrayLayers) {\r\n                var sublayers = arrayLayers[i].getSubLayers();\r\n                if (sublayers.length > 0) {\r\n                    recursiveSubLayers(sublayers)\r\n                } else {\r\n                    optionsSublayers.push({\r\n                        label: arrayLayers[i].title,\r\n                        value: arrayLayers[i].layerObject.url\r\n                    });\r\n                    infosSublayers.push(arrayLayers[i]);\r\n                }\r\n            }\r\n        };\r\n        return {\r\n            optSubLayers: optionsSublayers,\r\n            infoSubLayers: infosSublayers\r\n        }\r\n    },\r\n\r\n    // _gridxLayers(){\r\n      // var listLayers = this.NodeUrlDepa.options;\r\n     // var elm = document.getElementById(\"containerListFeatures\");\r\n       // var template;\r\n      // for (var i in listLayers){\r\n        // option = listLayers[i]\r\n        // var tmp = `\r\n          // <div>\r\n            // <div></div>\r\n            // <div>${option.label}</div>\r\n            // <div><select data-dojo-type='dijit/form/Select'></select></div>\r\n          // </div><br>\r\n        // `\r\n        // template = template + tmp;\r\n      // }\r\n      // html.set(this.containerListFeatures.domNode, template);\r\n    // }\r\n\r\n\r\n\r\n})"]}